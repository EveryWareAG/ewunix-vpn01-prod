# Dies ist eine Chef generierte Datei. Manuelle Ã„nderungen gehen u.U. verloren!

# Quelle: https://ewserv-git01-prod.everyware.internal/unix/scripts/tree/master/shell-audit
# Info: http://wiki.1st.ch/doku.php?id=everyware:intern:bash_logging

#created by francois scheurer
#last version 2014-10-03
#filename: '/etc/bash_franzi'
#This file must be sourced by '~/.bashrc', which is the last runned startup script for bash invocation for login interactive, login non-interactive and non-login interactive shells.
#cf. 'http://www.solipsys.co.uk/new/BashInitialisationFiles.html' for a diagram
#
#Having a complete history of all typed commands can be very helpful in many scenarios:
#  when several administrators work together on the same server and need to know what was done previously
#  when someone need to redo an older sequence of commands or to understand an undocumented maintenance process
#  for troubleshooting or forensic analysis, by crosschecking the date of an event or of a file with the commands executed at that date
#
#The standard '.bash_history' file of the shell is unfortunately not written on disk in the case of a crash and it may be deleted by the user.
#Another problem is that when many shell sessions are running concurrently, their logging will only occur when they are closed, therefore the commands of the history will not appear in their chronological order.
#Furthermore, '.bash_history' will not include essential information like the 'working directory' of the command; and by default the repetition or re-edition of commands will not be logged, too.
#
#Some solutions exist to improve this, either by patching or installing binaries:
#  'bash-BOFH' patching and recompiling: works well but need a new patch for each release of the bash
# 'snoopy': is logging all commands except shell builtins
#  'rootsh / sniffy / ttyrpld / ttysnoop': logs everything, also output of commands, it may be useful but it generates very verbose logs
#  'grsecurity' patched kernels: powerful but it may be a not suitable solution if an official kernel is required (e.g. for Oracle DB)
#  there is also an old 'sshd' patch ('http://www.kdvelectronics.eu/ssh-logging/ssh-logging.html')
#  'screen -x' can also be useful for cooperation work, but it is not a command logger
#
#In contrast to that, the presented method is very easy to deploy; it is just a shellscript that is running in bash (standard shell on most systems) and therefore it is architecture independent.
#It will allow a complete audit of all commands/builtins executed interactively in the bash.
#Note that a user can avoid calling this file by starting a shell with options like '--norc'; he also can unset or overwrite variables like 'PROMPT_COMMAND'.
#Therefore this script is useful for audit but an alternative solution with bash patching should be considered if the security requirements are the priority.
#
#Note on Solaris:
#  Then modify your /etc/syslog.conf to include this line:
#    user.info /var/adm/userlog.info
#  To assign 'bash' as the login shell in Solaris: passwd -e /bin/bash .
#  Make sure that the audit-script is sourced (=included) correctly during the bash invocation.
#  If your bash version is too old, $HISTCONTROL will not allow you to log duplicated commands correctly.
#       svcadm restart system/system-log  
#       svcadm disable ssh
#       svcadm enable ssh
#
#Note on WinSCP:
#       Following table shows if WinSCP is working with combinations of /etc/ssh/sshd_config and WinSCP settings:
#                                                      SFTP    SCP & Shell=Default    SCP & Shell=/bin/bash
#       Subsystem sftp /usr/lib/openssh/sftp-server    
#       ForceCommand "/etc/forcecommand.sh"            OK      NOK                    OK
#       
#       Subsystem sftp internal-sftp
#       ForceCommand "/etc/forcecommand.sh"            NOK     NOK                    OK
#       
#       Subsystem sftp /usr/lib/openssh/sftp-server    OK      OK                     OK
#       
#       Subsystem sftp internal-sftp                   OK      OK                     OK

if [ -n "${BASH_VERSION}" ]; then
  AUDIT_SHELL="bash"
elif [ -n "${ZSH_VERSION}" ]; then 
  AUDIT_SHELL="zsh"
else
  return
fi

#to avoid sourcing this file more than once
if [ -n "${OSTYPE##solaris*}" ]; then #following not working in solaris
  #do not source this file twice; also do not source it if we are in forcecommand.sh, source it later from "-bash-li"
  #if we would source it from forcecommand.sh, the environment would be lost after the call of 'exec -l bash -li' 
  if { [ "$AUDIT_SHELL" = "bash" ] && [ "$AUDIT_INCLUDED" = "$$" ]; } || { [ -z "$SSH_ORIGINAL_COMMAND" ] && [ "$(cat /proc/$$/cmdline)" = "${AUDIT_SHELL}-c\"/etc/forcecommand.sh\"" ]; }; then
    return
  else
    declare -rx AUDIT_INCLUDED="$$"
  fi
fi

#'history' options
declare -rx HISTCMD                                         #history line number
case "$AUDIT_SHELL" in
  bash)
    declare -rx HISTCONTROL=""                              #does not ignore spaces or duplicates
    declare -rx HISTIGNORE=""                               #does not ignore patterns
    shopt -s histappend                                     #never overwrite
    shopt -s cmdhist                                        #multi lines converted into single lines
    set +o functrace                                        #disable trap DEBUG inherited in functions, command substitutions or subshells, normally the default setting already
    function QUERY_EXTGLOB() { shopt -q extglob; }
    function ENABLE_EXTGLOB() { shopt -s extglob; }
    function DISABLE_EXTGLOB() { shopt -u extglob; }
    ;;
  zsh)
    setopt append_history
    unsetopt histexpiredupsfirst
    unsetopt histfindnodups
    unsetopt histignorealldups
    unsetopt histignoredups
    unsetopt histignorespace
    unsetopt histnofunctions
    unsetopt histnostore
    unsetopt histsavenodups
    function QUERY_EXTGLOB() { local STATE_EXTGLOB="$(setopt)"; [ -z "${STATE_EXTGLOB##*kshglob*}" ]; }
    function ENABLE_EXTGLOB() { setopt kshglob; }
    function DISABLE_EXTGLOB() { unsetopt kshglob; }
    ;;
esac

#
#
#
#bash audit & traceability
declare -rx AUDIT_LOGINUSER="$(who -mu | awk '{print $1}')"
declare -rx AUDIT_LOGINPID="$(who -mu | awk '{print $6}')"
declare -rx AUDIT_USER="$USER"                              #defined by pam during su/sudo
declare -rx AUDIT_PID="$$"
declare -rx AUDIT_TTY="$(who -mu | awk '{print $2}')"
declare -rx AUDIT_SSH="$([ -n "$SSH_CONNECTION" ] && echo "$SSH_CONNECTION" | awk '{print $1":"$2"->"$3":"$4}')"
declare -rx AUDIT_STR="[audit $AUDIT_LOGINUSER/$AUDIT_LOGINPID as $AUDIT_USER/$AUDIT_PID on $AUDIT_TTY/$AUDIT_SSH]"
declare -x AUDIT_LASTHISTLINE=""                            #to avoid logging the same line twice
declare -rx AUDIT_SYSLOG="1"                                #to use a local syslogd
#
#
#
#the logging at each execution of command is performed with a trap DEBUG function
#and having set the required history options (HISTCONTROL, HISTIGNORE)
#and to disable the trap in functions, command substitutions or subshells.
#it turns out that this solution is simple and works well with piped commands, subshells, aborted commands with 'ctrl-c', etc..
function AUDIT_DEBUG() {
  QUERY_EXTGLOB; local AUDIT_LASTEXTGLOB="$?"               #to restore extglob setting
  ENABLE_EXTGLOB                                            #enable extended pattern matching operators
  if [ -z "$AUDIT_LASTHISTLINE" ]; then                     #initialization
    local AUDIT_CMD="$(fc -l -1 -1 2>/dev/null)"            #previous history command (and hide the error if empty history)
    AUDIT_LASTHISTLINE="${AUDIT_CMD%%+([^ 0-9])*}"
    AUDIT_LASTHISTLINE="${AUDIT_LASTHISTLINE// /}"
  else
    AUDIT_LASTHISTLINE="$AUDIT_HISTLINE"
  fi
  case "$AUDIT_SHELL" in
    bash) local AUDIT_CMD="$(history 1)";;                  #current history command
    zsh) local AUDIT_CMD="$(history -1)";;
  esac
  AUDIT_HISTLINE="${AUDIT_CMD%%+([^ 0-9])*}"
  AUDIT_HISTLINE="${AUDIT_HISTLINE// /}"
  if [ "${AUDIT_HISTLINE:-0}" -ne "${AUDIT_LASTHISTLINE:-0}" ] || [ "${AUDIT_HISTLINE:-0}" -eq "1" ]; then  #avoid logging unexecuted commands after 'ctrl-c', 'empty+enter', or after 'ctrl-d'
    #remove in last history cmd its line number (if any) and send to syslog
    if [ -n "$AUDIT_SYSLOG" ]; then
      if ! logger -p user.info -t "$AUDIT_STR $PWD" -- "${AUDIT_CMD##*( )?(+([0-9])?(\*)+( ))}"; then
        echo error "$AUDIT_STR $PWD" "${AUDIT_CMD##*( )?(+([0-9])?(\*)+( ))}"
      fi
    else
      echo "$( date +%F_%H:%M:%S ) $AUDIT_STR $PWD ${AUDIT_CMD##*( )?(+([0-9])?(\*)+( ))}" >>/var/log/userlog.info
    fi
    local AUDIT_RET="0"
  else
    local AUDIT_RET="1"
  fi
  if [ "$AUDIT_LASTEXTGLOB" -eq 1 ]; then
    DISABLE_EXTGLOB                                         #restore extglob setting; disable extended pattern matching operators
  fi
  return "$AUDIT_RET"
}
#
#
#
#audit the session closing
function AUDIT_EXIT() {
  local AUDIT_STATUS="$?"
  if [ -n "$AUDIT_SYSLOG" ]; then
     logger -p user.info -t "$AUDIT_STR" "#=== session closed ==="
  else
    echo "$( date +%F_%H:%M:%S ) $AUDIT_STR" "#=== session closed ===" >>/var/log/userlog.info
  fi
  exit "$AUDIT_STATUS"
}
#
#
#
#make audit trap functions readonly; disable trap DEBUG inherited (normally the default setting already)
declare -frx +t AUDIT_DEBUG
declare -frx +t AUDIT_EXIT
#
#
#
#audit the session opening
if [ -n "$AUDIT_SYSLOG" ]; then
  logger -p user.info -t "$AUDIT_STR" "#=== session opened ===" #audit the session openning
else
  echo "$( date +%F_%H:%M:%S ) $AUDIT_STR" "#=== session opened ===" >>/var/log/userlog.info
fi
#
#
#
#when a bash command is executed it launches first the AUDIT_DEBUG(),
#then the trap DEBUG is disabled to avoid a useless rerun of AUDIT_DEBUG() during the execution of pipes-commands;
#at the end, when the prompt is displayed, re-enable the trap DEBUG
case "$AUDIT_SHELL" in
  bash)
    declare -rx PROMPT_COMMAND="[ -n \"\$AUDIT_DONE\" ]; trap AUDIT_EXIT EXIT; AUDIT_DONE=; trap 'AUDIT_DEBUG && AUDIT_DONE=1; trap DEBUG' DEBUG"
    trap AUDIT_EXIT EXIT                                    #audit the session closing
    ;;
  zsh)
    declare -rx PROMPT_COMMAND="[ -n \"\$AUDIT_DONE\" ]; AUDIT_DONE=; trap 'AUDIT_DEBUG && AUDIT_DONE=1; trap DEBUG' DEBUG"
    #http://superuser.com/questions/735660/whats-the-zsh-equivalent-of-bashs-prompt-command
    function precmd() { eval "$PROMPT_COMMAND"; }
    trap AUDIT_EXIT EXIT                                    #audit the session closing
    ;;
esac
declare -rx BASH_COMMAND                                    #current command executed by user or a trap
declare -rx SHELLOPT                                        #shell options, like functrace

# EOF
