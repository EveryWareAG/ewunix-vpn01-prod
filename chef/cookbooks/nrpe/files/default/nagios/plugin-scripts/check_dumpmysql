#!/bin/sh
# Generated by Chef // Changes might be overwritten! EveryWare AG 

####################################################################
# Script:  check_dumpmysql                                         #
# Author:  Claudio Kuenzler                                        #
# Descr:   Checks the log file of dumpmysql.sh                     #
# History:                                                         #
# 20131018 Created first version                                   #
# 20131022 Logfile can be given as argument                        #
# 20131023 Use logfile variable in find cmd                        #
# 20131023 find -1 instead of 0                                    #
####################################################################
# Variables
if [ -z "${1}"  ]
then logfile="/var/log/dumpmysql.now.log"
else logfile="$1"
fi
lastline=`tail -1 $logfile`
#nowts=`perl -le 'print time()'`
####################################################################
#echo "Debug: $lastline"
####################################################################
# Check if logfile exists
if [ -r $logfile ]
then
  # Check if logfile is newer than 24h
  agecheck=`find $logfile -mtime -1 | wc -l | sed -e 's/^[ \t]*//'`
  if [ $agecheck -eq 0 ]
  then echo "MySQL Backup CRITICAL: Logfile $logfile older than 24h"; exit 2
  else 
    # Check if given logfile is really our dumpmysql logfile
    isrealfile=`echo $lastline | grep -c '%SOE%'`
    if [ $isrealfile -eq 0 ]; then echo "MySQL Backup CRITICAL: Logfile $logfile does not look like our logfile"; exit 2; fi

    # Check if an error is logged
    iserror=`cat $logfile | grep -c "ERROR"`
    if [ $iserror -gt 0 ]; then echo "MySQL Backup CRITICAL: Errors occured during backup"; exit 2; fi

    # Start the checks with the content of the logfile
    isend=`echo $lastline | grep -c "END,.ALL."`
    if [ $isend -eq 0 ]
    then echo "MySQL Backup RUNNING"; exit 1
    elif [ $isend -eq 1 ]
    then 
      duration=`echo $lastline | awk -F, '{print $9}'`
      freedfsize=`echo $lastline | awk -F, '{print $10}'`
      freedfsizeg=`expr $freedfsize / 1024 / 1024`
      freedfsizeb=`expr $freedfsize \* 1024`
      echo "MySQL Backup OK - Duration: $duration seconds, Free Space: ${freedfsizeg} GB|time=${duration}s space_free=${freedfsizeb}"
      exit 0
    else echo "MySQL Backup UNKNOWN State"; exit 3
    fi
  fi
else
  echo "MySQL Backup CRITICAL: Cannot read Logfile ($logfile)"
  exit 2
fi
